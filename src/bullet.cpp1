#include "raylib-cpp.hpp"

#include <btBulletDynamicsCommon.h>

int main() {
    // Create a raylib window and camera
    raylib::Window window(800, 600, "raylib-cpp + Bullet Physics");
    raylib::Camera3D camera(
        { 10.0f, 10.0f, 10.0f },
        { 0.0f, 0.0f, 0.0f },
        { 0.0f, 1.0f, 0.0f },
        45.0f,
        CAMERA_PERSPECTIVE
    );

    // --- Bullet Physics Setup ---
    btDefaultCollisionConfiguration collisionConfig;
    btCollisionDispatcher dispatcher(&collisionConfig);
    btDbvtBroadphase broadphase;
    btSequentialImpulseConstraintSolver solver;
    btDiscreteDynamicsWorld dynamicsWorld(&dispatcher, &broadphase, &solver, &collisionConfig);
    dynamicsWorld.setGravity(btVector3(0, -9.8f, 0));

    // Ground plane (static)
    btCollisionShape* groundShape = new btStaticPlaneShape(btVector3(0, 1, 0), 0);
    btDefaultMotionState* groundMotion = new btDefaultMotionState(btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 0, 0)));
    btRigidBody::btRigidBodyConstructionInfo groundInfo(0.0f, groundMotion, groundShape, btVector3(0, 0, 0));
    btRigidBody* groundBody = new btRigidBody(groundInfo);
    dynamicsWorld.addRigidBody(groundBody);

    // Falling box
    btCollisionShape* boxShape = new btBoxShape(btVector3(1, 1, 1));
    btDefaultMotionState* boxMotion = new btDefaultMotionState(
        btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 10, 0)));
    btScalar mass = 1.0f;
    btVector3 inertia(0, 0, 0);
    boxShape->calculateLocalInertia(mass, inertia);
    btRigidBody::btRigidBodyConstructionInfo boxInfo(mass, boxMotion, boxShape, inertia);
    btRigidBody* boxBody = new btRigidBody(boxInfo);
    dynamicsWorld.addRigidBody(boxBody);

    SetTargetFPS(60);

    // --- Main Loop ---
    while (!window.ShouldClose()) {
        dynamicsWorld.stepSimulation(1.0f / 60.0f, 10);

        // Get updated box position
        btTransform trans;
        boxBody->getMotionState()->getWorldTransform(trans);
        btVector3 pos = trans.getOrigin();

        BeginDrawing();
        ClearBackground(RAYWHITE);

        BeginMode3D(camera);
        DrawGrid(20, 1.0f);

        // Ground
        DrawCube({ 0.0f, -0.5f, 0.0f }, 10.0f, 1.0f, 10.0f, DARKGRAY);

        // Falling box
        DrawCube({ pos.getX(), pos.getY(), pos.getZ() }, 2.0f, 2.0f, 2.0f, RED);
        DrawCubeWires({ pos.getX(), pos.getY(), pos.getZ() }, 2.0f, 2.0f, 2.0f, MAROON);
        EndMode3D();

        DrawText("Bullet Physics + raylib-cpp", 10, 10, 20, DARKGRAY);
        EndDrawing();
    }

    // --- Cleanup ---
    dynamicsWorld.removeRigidBody(boxBody);
    delete boxBody->getMotionState();
    delete boxBody;
    delete boxShape;

    dynamicsWorld.removeRigidBody(groundBody);
    delete groundBody->getMotionState();
    delete groundBody;
    delete groundShape;

    return 0;
}

